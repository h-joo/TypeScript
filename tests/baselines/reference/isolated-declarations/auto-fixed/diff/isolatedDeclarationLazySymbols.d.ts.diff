// [[Reason: Function declarations are not fixed]] ////

//// [tests/cases/compiler/isolatedDeclarationLazySymbols.ts] ////

===================================================================
--- TSC	declarations
+++ DTE	declarations
@@ -1,11 +1,9 @@
 
 
 //// [isolatedDeclarationLazySymbols.d.ts]
 export declare function foo(): void;
-export declare namespace foo {
-    var b: string;
-}
+export declare namespace foo { }
 declare const o: {
     readonly ["prop.inner"]: "a";
     readonly prop: {
         readonly inner: "b";
@@ -20,12 +18,13 @@
 export {};
 //# sourceMappingURL=isolatedDeclarationLazySymbols.d.ts.map
 /// [Errors] ////
 
+isolatedDeclarationLazySymbols.ts(13,1): error TS9023: Assigning properties to functions without declaring them is not supported with --isolatedDeclarations. Add an explicit declaration for the properties assigned to this function.
 isolatedDeclarationLazySymbols.ts(16,5): error TS1166: A computed property name in a class property declaration must have a simple literal type or a 'unique symbol' type.
 
 
-==== isolatedDeclarationLazySymbols.ts (1 errors) ====
+==== isolatedDeclarationLazySymbols.ts (2 errors) ====
     export function foo(): void {
     
     }
     
@@ -37,8 +36,10 @@
     } as const
     
     foo[o["prop.inner"]] ="A";
     foo[o.prop.inner] = "B";
+    ~~~~~~~~~~~~~~~~~
+!!! error TS9023: Assigning properties to functions without declaring them is not supported with --isolatedDeclarations. Add an explicit declaration for the properties assigned to this function.
     
     export class Foo {
         [o["prop.inner"]] ="A"
         ~~~~~~~~~~~~~~~~~
