// [[Reason: Fixing enum values is not supported]] ////

//// [tests/cases/conformance/types/literal/templateLiteralTypes4.ts] ////

===================================================================
--- TSC	declarations
+++ DTE	declarations
@@ -38,10 +38,10 @@
     One = 1
 }
 type TNumberLiteralEnum0 = "0" extends `${infer T extends NumberLiteralEnum}` ? T : never;
 declare const enum NonLiteralEnum {
-    Zero = 0,
-    One = 1
+    Zero,
+    One
 }
 type TNonLiteralEnum0 = "0" extends `${infer T extends NonLiteralEnum}` ? T : never;
 type PString00 = "0" extends `${infer T extends string | StringLiteralEnum}` ? T : never;
 type PString01 = "0" extends `${infer T extends string | number}` ? T : never;
@@ -158,13 +158,15 @@
 declare function f4<T extends boolean>(s: `**${T}**`): T;
 //# sourceMappingURL=templateLiteralTypes4.d.ts.map
 /// [Errors] ////
 
+templateLiteralTypes4.ts(43,29): error TS9020: Enum member initializers must be computable without references to external symbols with --isolatedDeclarations.
+templateLiteralTypes4.ts(43,60): error TS9020: Enum member initializers must be computable without references to external symbols with --isolatedDeclarations.
 templateLiteralTypes4.ts(285,12): error TS2345: Argument of type '2' is not assignable to parameter of type '0 | 1'.
 templateLiteralTypes4.ts(289,12): error TS2345: Argument of type '2' is not assignable to parameter of type '0 | 1'.
 
 
-==== templateLiteralTypes4.ts (2 errors) ====
+==== templateLiteralTypes4.ts (4 errors) ====
     // infer from number
     type TNumber0 = "100" extends `${infer N extends number}` ? N : never; // 100
     type TNumber1 = "-100" extends `${infer N extends number}` ? N : never; // -100
     type TNumber2 = "1.1" extends `${infer N extends number}` ? N : never; // 1.1
@@ -206,8 +208,12 @@
     type TNumberLiteralEnum0 = "0" extends `${infer T extends NumberLiteralEnum}` ? T : never; // NumberLiteralEnum.Zero
     
     // infer from non-literal enums
     const enum NonLiteralEnum { Zero = NumberLiteralEnum.Zero, One = NumberLiteralEnum.One }
+                                ~~~~
+!!! error TS9020: Enum member initializers must be computable without references to external symbols with --isolatedDeclarations.
+                                                               ~~~
+!!! error TS9020: Enum member initializers must be computable without references to external symbols with --isolatedDeclarations.
     type TNonLiteralEnum0 = "0" extends `${infer T extends NonLiteralEnum}` ? T : never; // 0
     
     // infer using priority:
     //     string > template-literal > (string-literal | string-literal-enum) >
